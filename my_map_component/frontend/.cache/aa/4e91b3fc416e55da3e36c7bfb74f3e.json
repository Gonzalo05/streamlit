{"id":"MQuL","dependencies":[{"name":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\vector\\bool.js.map","includedInParent":true,"mtime":1742306051852},{"name":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\package.json","includedInParent":true,"mtime":1742305948236},{"name":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\package.json","includedInParent":true,"mtime":1742306051652},{"name":"../type","loc":{"line":19,"column":23,"index":901},"parent":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\vector\\bool.js","resolved":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\type.js"},{"name":"./base","loc":{"line":20,"column":23,"index":936},"parent":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\vector\\bool.js","resolved":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\vector\\base.js"},{"name":"./index","loc":{"line":21,"column":24,"index":971},"parent":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\vector\\bool.js","resolved":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\vector\\index.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});const e=require(\"../type\"),r=require(\"./base\"),t=require(\"./index\");class o extends r.BaseVector{static from(r){return t.vectorFromValuesWithType(()=>new e.Bool,r)}}exports.BoolVector=o;"},"sourceMaps":{"js":{"mappings":[{"source":"vector/bool.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":68}},{"source":"vector/bool.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":74}},{"source":"vector/bool.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":76}},{"source":"vector/bool.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":84}},{"source":"vector/bool.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":95}},{"source":"vector/bool.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":97}},{"source":"vector/bool.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":105}},{"source":"vector/bool.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":115}},{"source":"vector/bool.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":117}},{"source":"vector/bool.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":125}},{"source":"vector/bool.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":136}},{"source":"vector/bool.ts","name":null,"original":{"line":26,"column":13},"generated":{"line":1,"column":142}},{"source":"vector/bool.ts","name":null,"original":{"line":26,"column":32},"generated":{"line":1,"column":152}},{"source":"vector/bool.ts","name":null,"original":{"line":26,"column":32},"generated":{"line":1,"column":154}},{"source":"vector/bool.ts","name":null,"original":{"line":32,"column":11},"generated":{"line":1,"column":165}},{"source":"vector/bool.ts","name":null,"original":{"line":32,"column":36},"generated":{"line":1,"column":177}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":8},"generated":{"line":1,"column":180}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":15},"generated":{"line":1,"column":187}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":15},"generated":{"line":1,"column":189}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":40},"generated":{"line":1,"column":214}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":46},"generated":{"line":1,"column":218}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":50},"generated":{"line":1,"column":222}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":50},"generated":{"line":1,"column":224}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":58},"generated":{"line":1,"column":229}},{"source":"vector/bool.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":233}},{"source":"vector/bool.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":241}},{"source":"vector/bool.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":252}}],"sources":{"vector/bool.ts":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class BoolVector extends BaseVector<Bool> {\n    public static from<TNull = any>(input: Iterable<boolean | TNull>): BoolVector;\n    public static from<TNull = any>(input: AsyncIterable<boolean | TNull>): Promise<BoolVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Bool, TNull>): Chunked<Bool>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Bool, TNull>): Promise<Chunked<Bool>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<boolean | TNull> | AsyncIterable<boolean | TNull> | VectorBuilderOptions<Bool, TNull> | VectorBuilderOptionsAsync<Bool, TNull>) {\n        return vectorFromValuesWithType(() => new Bool(), input);\n    }\n}\n"},"lineCount":null}},"error":null,"hash":"7fe509f1a615ab7c4c18b5a0e0610d8e","cacheData":{"env":{}}}