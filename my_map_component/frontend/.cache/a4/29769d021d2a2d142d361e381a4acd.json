{"id":"lGeF","dependencies":[{"name":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\vector\\utf8.js.map","includedInParent":true,"mtime":1742306052372},{"name":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\package.json","includedInParent":true,"mtime":1742305948236},{"name":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\package.json","includedInParent":true,"mtime":1742306051652},{"name":"../vector","loc":{"line":19,"column":25,"index":903},"parent":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\vector\\utf8.js","resolved":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\vector.js"},{"name":"./base","loc":{"line":20,"column":23,"index":940},"parent":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\vector\\utf8.js","resolved":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\vector\\base.js"},{"name":"../type","loc":{"line":21,"column":23,"index":974},"parent":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\vector\\utf8.js","resolved":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\type.js"},{"name":"./index","loc":{"line":22,"column":24,"index":1010},"parent":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\vector\\utf8.js","resolved":"C:\\Users\\gonza\\OneDrive\\Documents\\CS\\Streamlit\\my_map_component\\frontend\\node_modules\\apache-arrow\\vector\\index.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});const e=require(\"../vector\"),r=require(\"./base\"),t=require(\"../type\"),s=require(\"./index\");class o extends r.BaseVector{static from(e){return s.vectorFromValuesWithType(()=>new t.Utf8,e)}asBinary(){return e.Vector.new(this.data.clone(new t.Binary))}}exports.Utf8Vector=o;"},"sourceMaps":{"js":{"mappings":[{"source":"vector/utf8.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":68}},{"source":"vector/utf8.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":74}},{"source":"vector/utf8.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":76}},{"source":"vector/utf8.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":84}},{"source":"vector/utf8.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":97}},{"source":"vector/utf8.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":99}},{"source":"vector/utf8.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":107}},{"source":"vector/utf8.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":117}},{"source":"vector/utf8.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":119}},{"source":"vector/utf8.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":127}},{"source":"vector/utf8.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":138}},{"source":"vector/utf8.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":140}},{"source":"vector/utf8.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":148}},{"source":"vector/utf8.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":1,"column":159}},{"source":"vector/utf8.ts","name":null,"original":{"line":27,"column":13},"generated":{"line":1,"column":165}},{"source":"vector/utf8.ts","name":null,"original":{"line":27,"column":32},"generated":{"line":1,"column":175}},{"source":"vector/utf8.ts","name":null,"original":{"line":27,"column":32},"generated":{"line":1,"column":177}},{"source":"vector/utf8.ts","name":null,"original":{"line":33,"column":11},"generated":{"line":1,"column":188}},{"source":"vector/utf8.ts","name":null,"original":{"line":33,"column":36},"generated":{"line":1,"column":200}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":8},"generated":{"line":1,"column":203}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":15},"generated":{"line":1,"column":210}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":15},"generated":{"line":1,"column":212}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":40},"generated":{"line":1,"column":237}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":46},"generated":{"line":1,"column":241}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":50},"generated":{"line":1,"column":245}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":50},"generated":{"line":1,"column":247}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":58},"generated":{"line":1,"column":252}},{"source":"vector/utf8.ts","name":null,"original":{"line":36,"column":11},"generated":{"line":1,"column":255}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":8},"generated":{"line":1,"column":266}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":15},"generated":{"line":1,"column":273}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":15},"generated":{"line":1,"column":275}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":22},"generated":{"line":1,"column":282}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":26},"generated":{"line":1,"column":286}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":31},"generated":{"line":1,"column":291}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":36},"generated":{"line":1,"column":296}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":42},"generated":{"line":1,"column":302}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":46},"generated":{"line":1,"column":306}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":46},"generated":{"line":1,"column":308}},{"source":"vector/utf8.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":1,"column":318}},{"source":"vector/utf8.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":1,"column":326}},{"source":"vector/utf8.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":1,"column":337}}],"sources":{"vector/utf8.ts":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class Utf8Vector extends BaseVector<Utf8> {\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, TNull>): Chunked<Utf8>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, TNull>): Promise<Chunked<Utf8>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, TNull> | VectorBuilderOptionsAsync<Utf8, TNull>) {\n        return vectorFromValuesWithType(() => new Utf8(), input);\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n"},"lineCount":null}},"error":null,"hash":"044054d4831a2a6c3345f1011251d015","cacheData":{"env":{}}}